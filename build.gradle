buildscript {
    def versionMajor = 1
    def versionMinor = 0
    def versionPatch = 1

    ext.versions = [
            'versionCode'        : versionMajor * 10000 + versionMinor * 100 + versionPatch,
            'versionName'        : "${versionMajor}.${versionMinor}.${versionPatch}",
            'minSdk'             : 16,
            'targetSdk'          : 27,
            'compileSdk'         : 27,
            'sourceCompatibility': JavaVersion.VERSION_1_8,
            'targetCompatibility': JavaVersion.VERSION_1_8,
            'supportLibrary'     : '27.1.1',
            'buildTools'         : '27.0.3'
    ]

    ext.deps = [
            'support'    : [
                    'annotations': "com.android.support:support-annotations:${versions.supportLibrary}",
                    'appcompat'  : "com.android.support:appcompat-v7:${versions.supportLibrary}"
            ],
            androidPlugin: 'com.android.tools.build:gradle:3.1.2',
            rxJava       : "io.reactivex.rxjava2:rxjava:2.1.12",
            rxJavaReplay : "com.jakewharton.rx2:replaying-share:2.0.1",
            jUnit        : "junit:junit:4.12",
            mockito      : "org.mockito:mockito-core:2.8.9",
    ]

    repositories {
        google()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.2'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0'
        //noinspection GradleDependency
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
    }
}

project.ext.preDexLibs = !project.hasProperty('disablePreDex')

subprojects {

    group = 'org.smartregister'

    ext.androidToolsBuildGradle     = '3.1.2'
    ext.androidBuildToolsVersion    = '27.0.3'
    ext.androidMinSdkVersion        = 16
    ext.androidCompileSdkVersion    = 27
    ext.androidTargetSdkVersion     = 27
    ext.androidAnnotationsVersion = '3.0.1'
    ext.androidAnnotationsAPIVersion = '3.0.1'

    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url "${projectDir}/libs/" }
        maven { url "http://nexus.motechproject.org/content/repositories/drishti" }
        maven { url "http://nexus.motechproject.org/content/repositories/snapshots" }
        maven { url "http://acra.googlecode.com/svn/repository/releases" }
        maven { url "http://repo.maven.apache.org/maven2" }
        maven { url "http://cloudant.github.io/cloudant-sync-eap/repository" }

        maven { url "${projectDir}/opensrp-bidan/../libs/" }
        maven { url "${projectDir}/opensrp-gizi/../libs/" }
        maven { url "${projectDir}/opensrp-vaksinator/../libs/" }
        mavenLocal()
    }

    // Improve build server performance by allowing disabling of pre-dexing
    // (see http://tools.android.com/tech-docs/new-build-system/tips#TOC-Improving-Build-Server-performance.)
    project.plugins.whenPluginAdded { plugin ->
        if("com.android.build.gradle.AppPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        } else if ("com.android.build.gradle.LibraryPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }
}

apply plugin : 'java'
apply plugin : 'build-dashboard'
apply plugin : "com.github.kt3k.coveralls"

buildDashboard {
    reports.html.setDestination(file("build/"))
}

test.reports.html.enabled = false
test.reports.junitXml.enabled = false

allprojects {
    apply plugin: 'jacoco'
    repositories {
        google()
        jcenter()
    }
}

subprojects { subProject ->
    def exclude = ['org/smartregister/*/R*.class', '**/BuildConfig.class', '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*']
    task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
        reports {
            xml.enabled = true
            html.enabled = true
        }

        sourceDirectories = files(["${project.projectDir}/src/main/java"])
        classDirectories = files([fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: exclude)])
        executionData = fileTree(dir: "$project.buildDir", includes: [
                "jacoco/testDebugUnitTest.exec"
        ])

        rootProject.coveralls.sourceDirs.addAll(sourceDirectories.flatten())
    }

    project.plugins.whenPluginAdded { plugin ->
        if("com.android.build.gradle.AppPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        } else if ("com.android.build.gradle.LibraryPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }

}

def publishedProjects = subprojects.findAll { !it.path.contains('opensrp') }
task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'

    dependsOn(publishedProjects.jacocoTestReport)

    additionalSourceDirs = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(publishedProjects.jacocoTestReport.sourceDirectories)
    classDirectories = files(publishedProjects.jacocoTestReport.classDirectories)
    executionData = files(publishedProjects.jacocoTestReport.executionData)

    reports {
        html.enabled = true
        xml.enabled = true
    }
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'
    dependsOn jacocoRootReport
}